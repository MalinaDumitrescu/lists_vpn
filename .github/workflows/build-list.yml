name: Build Database Update

on:
  push:
    paths:
      - 'input/**'
      - '.github/workflows/build-list.yml'
  schedule:
    - cron: '45 8 * * *'   # rulează în fiecare zi la 08:45 UTC
  workflow_dispatch:

jobs:
  build_and_commit:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        list:
          - name: vpn
            validate_low:  1500000
            validate_high: 3000000
          - name: datacenter
            validate_low:  250000000
            validate_high: 400000000

    steps:
      - uses: actions/checkout@v4

      - name: Dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ipcalc perl gzip coreutils

      - name: Downloading ASN database
        run: |
          set -euo pipefail
          curl -fsSL https://iptoasn.com/data/ip2asn-v4.tsv.gz | gzip -d > /tmp/asndb.tsv

      - name: ASN -> IP Range
        shell: bash
        run: |
          set -euo pipefail

          # Generează CIDR din ASN-urile listei curente (vpn / datacenter)
          cat "$GITHUB_WORKSPACE/input/${{ matrix.list.name }}/ASN.txt" \
            | grep -v '^#' | awk '{print $1}' | grep '^AS' | while read -r asn; do
                echo "Processing $asn"
                # ${asn:2} = taie prefixul "AS" și păstrează numărul
                awk -v A="${asn:2}" '{ if ($3 == A) print "ipcalc -rn "$1"-"$2" | tail -n+2" }' /tmp/asndb.tsv \
                  | bash >> /tmp/asn-processed.txt
              done

          # Pentru datacenter: include și ASN-urile din vpn (ca în workflow-ul original)
          if [[ "${{ matrix.list.name }}" == "datacenter" ]]; then
            cat "$GITHUB_WORKSPACE/input/vpn/ASN.txt" \
              | grep -v '^#' | awk '{print $1}' | grep '^AS' | while read -r asn; do
                  echo "Processing (DC includes VPN) $asn"
                  awk -v A="${asn:2}" '{ if ($3 == A) print "ipcalc -rn "$1"-"$2" | tail -n+2" }' /tmp/asndb.tsv \
                    | bash >> /tmp/asn-processed.txt
                done
          fi

      - name: Merge Lists
        shell: bash
        run: |
          set -euo pipefail

          # Curățare + păstrează doar prefixe /0.. /24 (stabilitate BGP; cele mai mici lasă-le pe surse manuale)
          perl ./helpers/cleanup.pl /tmp/asn-processed.txt \
            | grep -E '/(2[0-4]|1[0-9]|[0-9])$' > /tmp/asn-cleaned.txt

          # IP-uri manuale din input/<list>/ips/*.txt (Apple/Mullvad/PIA/Proton etc.)
          # Notă: dacă directorul e gol, comanda cat poate eșua; folosim find pentru siguranță
          : > /tmp/manual-processed.txt
          if find "$GITHUB_WORKSPACE/input/${{ matrix.list.name }}/ips" -type f -name '*.txt' | grep -q .; then
            find "$GITHUB_WORKSPACE/input/${{ matrix.list.name }}/ips" -type f -name '*.txt' -print0 \
              | xargs -0 cat \
              | grep -v '^#' | awk '{print $1}' | sed '/^$/d' > /tmp/manual-processed.txt
          fi

          # Sortare numerică pe IPv4 (mai corectă decât sort -n simplu)
          cat /tmp/asn-cleaned.txt /tmp/manual-processed.txt \
            | sort -t . -k1,1n -k2,2n -k3,3n -k4,4n > /tmp/ipv4.txt

          # Curățarea finală (dedupe + agregare)
          perl ./helpers/cleanup.pl /tmp/ipv4.txt > ipv4.txt

      - name: Test generated Lists
        shell: bash
        run: |
          set -euo pipefail

          if [[ $(grep -c '^0\.' ipv4.txt || true) != "0" ]]; then
            echo "Lists can not contain 0.0.0.0/8"
            exit 1
          fi
          if [[ $(grep -c '^127\.' ipv4.txt || true) != "0" ]]; then
            echo "Lists can not contain 127.0.0.0/8"
            exit 1
          fi

          ips_covered=$(awk -F/ 'BEGIN{a=0}{ if($2==""){a+=1}else{a+=2^(32-$2)} }END{print a}' ipv4.txt)
          echo "Addresses covered: $ips_covered"

          if [[ "$ips_covered" -lt ${{ matrix.list.validate_low }} ]]; then
            echo "Too few addresses covered ($ips_covered)"
            exit 1
          fi
          if [[ "$ips_covered" -gt ${{ matrix.list.validate_high }} ]]; then
            echo "Too many addresses covered ($ips_covered)"
            exit 1
          fi

      # === PUSH doar către repo-ul AI ===
      - name: Push VPN/DC ipv4.txt în repo-ul AI
        uses: X4BNet/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          source_file: 'ipv4.txt'
          destination_repo: 'MalinaDumitrescu/ai-vpn-firewall'                 # ← înlocuiește cu repo-ul tău
          destination_folder: '/lists/${{ matrix.list.name }}/'
          rename: '${{ matrix.list.name }}_ipv4.txt'
          user_email: 'listbuilder@bot.local'
          user_name: 'listbuilder'
          destination_branch: 'main'
